{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to 4K First Legal Aid\n\n\nThe product aims to provide a solution to different types of real-life legal\nscenarios which an individual is facing. It will assist them by showing the\nlegitimate solution regarding their legal queries. An individual needs to enter\nhis complaint and the product will assist whether any previous cases have been\nreported, which have similar context and inform him about different actions he\nshould take. Different datasets stored in Hadoop cluster and analyzed on\nMapReduce cluster will be used to train the machine learning model. This model\nwill be used to analyze and predict the accurate solutions based on their legal\nqueries.\n\n\n\nRequirements\n\n\n\n\nRHEL 7+\n\n\nPython 3.6+\n\n\nDocker\n\n\nAnsible\n\n\nHadoop\n\n\n\n\nPackages\n\n\n\n\nface_recognition\n    - pip3 install face_recognition\n\n\nOpenCV 3+\n           - pip3 install opencv-python\n\n\ndlib\n\n\nweb sockets\n         - pip3 install websockets\n\n\n\n\nNote: The project will not work until following is done\n\n\n\n\n\n\nDisable SELINUX: \nsetenforce 0\n\n\n\n\n\n\nDisable Firewall: \niptables -F\n\n\n\n\n\n\nRun face authentication python program: \n./cgi-bin/socket_imgauth.py &\n\n\n\n\n\n\nRun speech processing python program: \n./cgi-bin/socket_voice.py &\n\n\n\n\n\n\nServerIP: 192.168.43.98 (Not used in dynamic way, so need to change manually\n  in some files)\n\n\n\n\n\n\n\nProject layout\n\n\nIncluding only the necessary files and dependencies in the project tree below\n\n\nwww\n  \u251c\u2500\u2500 html\n  \u2502   \u251c\u2500\u2500 index.html                # Product homepage\n  \u2502   \u251c\u2500\u2500 login.html                # Login webpage\n  \u2502   \u2502\n  \u2502   \u251c\u2500\u2500 js\n  \u2502   \u2502   \u2502-- Face Recognition ------------------------------------------------------------\n  \u2502   \u2502   \u251c\u2500\u2500 socket.js             # Client-side web socket for Face Authentication\n  \u2502   \u2502   \u251c\u2500\u2500 captureImage.js       # Configure webcam and capture image\n  \u2502   \u2502   \u251c\u2500\u2500 webcam.min.js         # HTML5 Webcam Image Capture Library\n  \u2502   \u2502   \u2502\n  \u2502   \u2502   \u2502-- Speech Processing -----------------------------------------------------------\n  \u2502   \u2502   \u251c\u2500\u2500 socket_speech.js      # Client-side web socket for Speech Processing\n  \u2502   \u2502   \u251c\u2500\u2500 speech.js             # Configure Speech Recognition\n  \u2502   \u2502   \u251c\u2500\u2500 say.js                # Speech Synthesizer\n  \u2502   \u2502   \u251c\u2500\u2500 annyang.min.js        # Voice Recognition Library\n  \u2502   \u2502   \u2514\u2500\u2500 speechkitt.min.js     # GUI for interacting with Speech Recognition\n  \u2502   \u2502\n  \u2502   \u2502-- Template Header and Footer -------------------------------------------------------\n  \u2502   \u251c\u2500\u2500 start_content.html        # Template Header\n  \u2502   \u2514\u2500\u2500 end_content.txt           # Template Footer\n  \u2502\n  \u2514\u2500\u2500 cgi-bin\n      \u2502-- First Legal Aid -------------------------------------------------------------------\n      \u251c\u2500\u2500 fla.py                    # First Legal Aid(FLA) Query Frontend\n      \u251c\u2500\u2500 law_nlp.py                # Plot graphs and display laws as per the query\n      \u251c\u2500\u2500 data.csv                  # FLA Dataset-1\n      \u251c\u2500\u2500 descdata.csv              # FLA Dataset-2\n      \u2502\n      \u2502-- Face Authentication ---------------------------------------------------------------\n      \u251c\u2500\u2500 takepic.py                # Captures an image which will be used for face ID\n      \u251c\u2500\u2500 socket_imgauth.py         # Server-side web socket for Face Authentication\n      \u251c\u2500\u2500 face.py                   # Matches unknown face with stored client's faces\n      \u251c\u2500\u2500 cookie.py                 # Create and store cookies and manage client sessions\n      \u2502\n      \u2502-- Speech Processing ------------------------------------------------------------------\n      \u251c\u2500\u2500 socket_voice.py           # Server-side web socket for Speech Processing\n      \u251c\u2500\u2500 nlp.py                    # Process text and returns custom URL\n      \u2502\n      \u2502-- Services ---------------------------------------------------------------------------\n      \u251c\u2500\u2500 list_services.py          # Frontend for listing all services\n      \u2502\n      \u2502-- PaaS -------------------------------------------------------------------------------\n      \u251c\u2500\u2500 get_paas.py               # PaaS Frontend\n      \u251c\u2500\u2500 paas.py                   # PaaS Backend\n      \u251c\u2500\u2500 show_container.py         # Gives access to a container in browser using shellinabox\n      \u2502\n      \u2502-- STaaS ------------------------------------------------------------------------------\n      \u251c\u2500\u2500 get_staas.py              # STaaS Frontend\n      \u251c\u2500\u2500 staas.py                  # STaaS Backend\n      \u2502\n      \u2502-- SaaS -------------------------------------------------------------------------------\n      \u251c\u2500\u2500 saas.py                   # SaaS Frontend\n      \u2502\n      \u2502-- CaaS -------------------------------------------------------------------------------\n      \u251c\u2500\u2500 get_caas.py               # CaaS Frontend\n      \u251c\u2500\u2500 cass-laun.py              # Launch container\n      \u251c\u2500\u2500 container_manager.py      # Show dock_manage.py in iframe\n      \u251c\u2500\u2500 dock_manage.py            # Start, stop and access containers and display real-time stats\n      \u251c\u2500\u2500 doc-start.py              # Start container\n      \u251c\u2500\u2500 doc-stop.py               # Stop container\n      \u2502\n      \u2502-- Hadoop and Map Reduce --------------------------------------------------------------\n      \u251c\u2500\u2500 get_hadoop_cluster.py     # Hadoop Setup Frontend\n      \u251c\u2500\u2500 hadoop.py                 # Setup Hadoop Cluster on name node and data nodes\n      \u251c\u2500\u2500 hadoop11.py               # Start name node and data node services\n      \u251c\u2500\u2500 hadoop12.py               # Setup MapReduce Cluster on job tracker and task tracker nodes\n      \u2514\u2500\u2500 hadoop_manager.py         # Frontend to give access to Hadoop Storage and MapReduce Cluster\n\n\n\n\n\nContributors\n\n\n\n\nKartike Bansal\n\n\nParag Khunteta\n\n\nShatakshi Kashyap\n\n\nYash Katta",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-4k-first-legal-aid",
            "text": "The product aims to provide a solution to different types of real-life legal\nscenarios which an individual is facing. It will assist them by showing the\nlegitimate solution regarding their legal queries. An individual needs to enter\nhis complaint and the product will assist whether any previous cases have been\nreported, which have similar context and inform him about different actions he\nshould take. Different datasets stored in Hadoop cluster and analyzed on\nMapReduce cluster will be used to train the machine learning model. This model\nwill be used to analyze and predict the accurate solutions based on their legal\nqueries.",
            "title": "Welcome to 4K First Legal Aid"
        },
        {
            "location": "/#requirements",
            "text": "RHEL 7+  Python 3.6+  Docker  Ansible  Hadoop",
            "title": "Requirements"
        },
        {
            "location": "/#packages",
            "text": "face_recognition     - pip3 install face_recognition  OpenCV 3+            - pip3 install opencv-python  dlib  web sockets          - pip3 install websockets   Note: The project will not work until following is done    Disable SELINUX:  setenforce 0    Disable Firewall:  iptables -F    Run face authentication python program:  ./cgi-bin/socket_imgauth.py &    Run speech processing python program:  ./cgi-bin/socket_voice.py &    ServerIP: 192.168.43.98 (Not used in dynamic way, so need to change manually\n  in some files)",
            "title": "Packages"
        },
        {
            "location": "/#project-layout",
            "text": "Including only the necessary files and dependencies in the project tree below  www\n  \u251c\u2500\u2500 html\n  \u2502   \u251c\u2500\u2500 index.html                # Product homepage\n  \u2502   \u251c\u2500\u2500 login.html                # Login webpage\n  \u2502   \u2502\n  \u2502   \u251c\u2500\u2500 js\n  \u2502   \u2502   \u2502-- Face Recognition ------------------------------------------------------------\n  \u2502   \u2502   \u251c\u2500\u2500 socket.js             # Client-side web socket for Face Authentication\n  \u2502   \u2502   \u251c\u2500\u2500 captureImage.js       # Configure webcam and capture image\n  \u2502   \u2502   \u251c\u2500\u2500 webcam.min.js         # HTML5 Webcam Image Capture Library\n  \u2502   \u2502   \u2502\n  \u2502   \u2502   \u2502-- Speech Processing -----------------------------------------------------------\n  \u2502   \u2502   \u251c\u2500\u2500 socket_speech.js      # Client-side web socket for Speech Processing\n  \u2502   \u2502   \u251c\u2500\u2500 speech.js             # Configure Speech Recognition\n  \u2502   \u2502   \u251c\u2500\u2500 say.js                # Speech Synthesizer\n  \u2502   \u2502   \u251c\u2500\u2500 annyang.min.js        # Voice Recognition Library\n  \u2502   \u2502   \u2514\u2500\u2500 speechkitt.min.js     # GUI for interacting with Speech Recognition\n  \u2502   \u2502\n  \u2502   \u2502-- Template Header and Footer -------------------------------------------------------\n  \u2502   \u251c\u2500\u2500 start_content.html        # Template Header\n  \u2502   \u2514\u2500\u2500 end_content.txt           # Template Footer\n  \u2502\n  \u2514\u2500\u2500 cgi-bin\n      \u2502-- First Legal Aid -------------------------------------------------------------------\n      \u251c\u2500\u2500 fla.py                    # First Legal Aid(FLA) Query Frontend\n      \u251c\u2500\u2500 law_nlp.py                # Plot graphs and display laws as per the query\n      \u251c\u2500\u2500 data.csv                  # FLA Dataset-1\n      \u251c\u2500\u2500 descdata.csv              # FLA Dataset-2\n      \u2502\n      \u2502-- Face Authentication ---------------------------------------------------------------\n      \u251c\u2500\u2500 takepic.py                # Captures an image which will be used for face ID\n      \u251c\u2500\u2500 socket_imgauth.py         # Server-side web socket for Face Authentication\n      \u251c\u2500\u2500 face.py                   # Matches unknown face with stored client's faces\n      \u251c\u2500\u2500 cookie.py                 # Create and store cookies and manage client sessions\n      \u2502\n      \u2502-- Speech Processing ------------------------------------------------------------------\n      \u251c\u2500\u2500 socket_voice.py           # Server-side web socket for Speech Processing\n      \u251c\u2500\u2500 nlp.py                    # Process text and returns custom URL\n      \u2502\n      \u2502-- Services ---------------------------------------------------------------------------\n      \u251c\u2500\u2500 list_services.py          # Frontend for listing all services\n      \u2502\n      \u2502-- PaaS -------------------------------------------------------------------------------\n      \u251c\u2500\u2500 get_paas.py               # PaaS Frontend\n      \u251c\u2500\u2500 paas.py                   # PaaS Backend\n      \u251c\u2500\u2500 show_container.py         # Gives access to a container in browser using shellinabox\n      \u2502\n      \u2502-- STaaS ------------------------------------------------------------------------------\n      \u251c\u2500\u2500 get_staas.py              # STaaS Frontend\n      \u251c\u2500\u2500 staas.py                  # STaaS Backend\n      \u2502\n      \u2502-- SaaS -------------------------------------------------------------------------------\n      \u251c\u2500\u2500 saas.py                   # SaaS Frontend\n      \u2502\n      \u2502-- CaaS -------------------------------------------------------------------------------\n      \u251c\u2500\u2500 get_caas.py               # CaaS Frontend\n      \u251c\u2500\u2500 cass-laun.py              # Launch container\n      \u251c\u2500\u2500 container_manager.py      # Show dock_manage.py in iframe\n      \u251c\u2500\u2500 dock_manage.py            # Start, stop and access containers and display real-time stats\n      \u251c\u2500\u2500 doc-start.py              # Start container\n      \u251c\u2500\u2500 doc-stop.py               # Stop container\n      \u2502\n      \u2502-- Hadoop and Map Reduce --------------------------------------------------------------\n      \u251c\u2500\u2500 get_hadoop_cluster.py     # Hadoop Setup Frontend\n      \u251c\u2500\u2500 hadoop.py                 # Setup Hadoop Cluster on name node and data nodes\n      \u251c\u2500\u2500 hadoop11.py               # Start name node and data node services\n      \u251c\u2500\u2500 hadoop12.py               # Setup MapReduce Cluster on job tracker and task tracker nodes\n      \u2514\u2500\u2500 hadoop_manager.py         # Frontend to give access to Hadoop Storage and MapReduce Cluster",
            "title": "Project layout"
        },
        {
            "location": "/#contributors",
            "text": "Kartike Bansal  Parag Khunteta  Shatakshi Kashyap  Yash Katta",
            "title": "Contributors"
        },
        {
            "location": "/face-recognition/",
            "text": "Face Recognition\n\n\nFor face recognition, a model need to trained to recognize face of users.\nHowever, using traditional approach of training a model, requires a lot of\nimages of user's face. Using \nface_recognition\n python package, which provides\nthe pre-trained model using CNN, on a huge amount of dataset will let us\ntrain the user face model from a single image (Just like what Facebook do for\ntagging persons in a picture).\n\n\nNow, whenever a new client registers, his/her image will be captured and stored\non the server, to be used for authentication. Next time, when that client had to\n login, his/her image will be captured again and the face encodings of this\n captured image and the stored image will be compared. If they matched, client\n will be able to login.\n\n\n\nRequirements\n\n\n\n\nwebcam.js\n   - To capture the image using webcam in client's browser\n\n\n\n\n\nWorking\n\n\nStep 1\n: Client's image is captured in his/her browser with the help of the\n javascipt library \nwebcam.js\n in the form of image URI.\n\n\nStep 2\n: The captured image is sent to the server using JavaScript\nwebsockets.\n\n\nStep 3\n: A python web socket program is already running in background on the\nserver. On receiving the image from client, face recognition will be done on\nthis image.\n\n\nStep 4\n: If the client face matches, a 32-byte random value cookie will be\ngenerated on the server, saved in a file with a username and the same cookie\nwill be sent to client browser using web sockets. Else, the client had to again\ncapture the image.\n\n\nStep 5\n: The client browser will receive the cookie and store it in the\nbrowser and redirects to access restricted page. Every access restricted page\nhave a JavaScript code that will match the client cookie with the server\ncookie, then only it will list the contents of the webpage, otherwise it will\nredirect to login page.\n\n\nNote\n: FaceID registration is not implemented yet. So, it needs to be done\nmanually by running a python program \n./cgi-bin/take_pic.py\n\n\n\n\nProblems\n\n\nProblem 1: Beginning Chrome 48 (November 2015), insecure camera (webcam) and\nmicrophone access is blocked over unsecured origins i.e. camera can't be\naccessed on websites without https protocol.\n\n\nSolution:\n If hosting web application over http, then we recommend using TLS\n(SSL) and HTTPS with a self-signed certificate. But it is difficult than said.\nIf you want to just test the web application on windows, instead follow this\napproach:\n\n\nChrome made an exception to localhost for local development purposes i.e.\nit will allow access to webcam over localhost.\n\n\nKeeping this in mind, we port mapped localhost's port no. 3000 to the our web\napplication IP and port number 80. So, instead of connecting the web application\n over the actual IP or URL, it can be accessed with \nhttp://localhost:3000\n\n\nRun the following command in windows CMD to portmap localhost:3000 to\nserverIP:port\n \n\n\nnetsh interface portproxy add v4tov4 listenport=3000 connectport=80 connectaddress= 192.168.43.98 protocol=tcp\n\n\n\n\nProblem 2: The image in client browser is captured in the form of image URI\nwhich is too large to be sent over to the server using the form POST method.\n\n\nSolution:\n To solve this problem, we used web sockets which will maintain a\nconnection to between server and client browser. Web sockets are like plain\nsockets but they allow connection over http using TCP protocol. Also, it will\nallow the client send images to server until he is authenticated, without\nreloading the webpage.",
            "title": "Face Recognition"
        },
        {
            "location": "/face-recognition/#face-recognition",
            "text": "For face recognition, a model need to trained to recognize face of users.\nHowever, using traditional approach of training a model, requires a lot of\nimages of user's face. Using  face_recognition  python package, which provides\nthe pre-trained model using CNN, on a huge amount of dataset will let us\ntrain the user face model from a single image (Just like what Facebook do for\ntagging persons in a picture).  Now, whenever a new client registers, his/her image will be captured and stored\non the server, to be used for authentication. Next time, when that client had to\n login, his/her image will be captured again and the face encodings of this\n captured image and the stored image will be compared. If they matched, client\n will be able to login.",
            "title": "Face Recognition"
        },
        {
            "location": "/face-recognition/#requirements",
            "text": "webcam.js    - To capture the image using webcam in client's browser",
            "title": "Requirements"
        },
        {
            "location": "/face-recognition/#working",
            "text": "Step 1 : Client's image is captured in his/her browser with the help of the\n javascipt library  webcam.js  in the form of image URI.  Step 2 : The captured image is sent to the server using JavaScript\nwebsockets.  Step 3 : A python web socket program is already running in background on the\nserver. On receiving the image from client, face recognition will be done on\nthis image.  Step 4 : If the client face matches, a 32-byte random value cookie will be\ngenerated on the server, saved in a file with a username and the same cookie\nwill be sent to client browser using web sockets. Else, the client had to again\ncapture the image.  Step 5 : The client browser will receive the cookie and store it in the\nbrowser and redirects to access restricted page. Every access restricted page\nhave a JavaScript code that will match the client cookie with the server\ncookie, then only it will list the contents of the webpage, otherwise it will\nredirect to login page.  Note : FaceID registration is not implemented yet. So, it needs to be done\nmanually by running a python program  ./cgi-bin/take_pic.py",
            "title": "Working"
        },
        {
            "location": "/face-recognition/#problems",
            "text": "Problem 1: Beginning Chrome 48 (November 2015), insecure camera (webcam) and\nmicrophone access is blocked over unsecured origins i.e. camera can't be\naccessed on websites without https protocol.  Solution:  If hosting web application over http, then we recommend using TLS\n(SSL) and HTTPS with a self-signed certificate. But it is difficult than said.\nIf you want to just test the web application on windows, instead follow this\napproach:  Chrome made an exception to localhost for local development purposes i.e.\nit will allow access to webcam over localhost.  Keeping this in mind, we port mapped localhost's port no. 3000 to the our web\napplication IP and port number 80. So, instead of connecting the web application\n over the actual IP or URL, it can be accessed with  http://localhost:3000  Run the following command in windows CMD to portmap localhost:3000 to\nserverIP:port\n   netsh interface portproxy add v4tov4 listenport=3000 connectport=80 connectaddress= 192.168.43.98 protocol=tcp   Problem 2: The image in client browser is captured in the form of image URI\nwhich is too large to be sent over to the server using the form POST method.  Solution:  To solve this problem, we used web sockets which will maintain a\nconnection to between server and client browser. Web sockets are like plain\nsockets but they allow connection over http using TCP protocol. Also, it will\nallow the client send images to server until he is authenticated, without\nreloading the webpage.",
            "title": "Problems"
        },
        {
            "location": "/speech-processing/",
            "text": "Speech Processing\n\n\nProcessing speech requires few steps to be done in order:\n\n\n\n\n\n\nInput\n: Speech Recognition(Speech to Text)\n\n\n\n\n\n\nProcess\n: NLP\n\n\n\n\n\n\nOutput\n: Speech Synthesis(Text to Speech)\n\n\n\n\n\n\nNote: Voice Recognition needs an active internet connection to work.\n\n\n\n\nRequirements\n\n\nJavascript Libraries\n\n\n\n\nAnnyang\n - Speech Recognition(Uses Google Speech Recognizer)\n\n\nSpeechKITT\n - GUI for interacting with Speech Recognition\n\n\nsay.js\n - Speech Synthesis\n\n\n\n\n\nWorking\n\n\nStep 1\n: Client gives speech input by interacting with the GUI provided by\n\nSpeechKITT\n which in turn uses \nAnnyang\n for speech recognition. The speech\nwill be recognized only, if it begins with the defined hotword.\n\n\nStep 2\n: After client finished speaking, the recognized text(excluding\nhotword) from speech is sent to the program \nsocket_voice.py\n running on server\nusing web sockets \nsocket_speech.js\n.\n\n\nStep 3\n: \nsocket_voice.py\n receives the text and process it using another\npython program \nnlp.py\n that takes text as input and returns the modified URL.\nIf successful, this URL is sent back to client web browser. Otherwise, an error\nmessage will be sent.\n\n\nStep 4\n: If client get the URL in return, the client browser will be\nredirected to that URL. Otherwise, he had to speak again the command.",
            "title": "Speech Processing"
        },
        {
            "location": "/speech-processing/#speech-processing",
            "text": "Processing speech requires few steps to be done in order:    Input : Speech Recognition(Speech to Text)    Process : NLP    Output : Speech Synthesis(Text to Speech)    Note: Voice Recognition needs an active internet connection to work.",
            "title": "Speech Processing"
        },
        {
            "location": "/speech-processing/#requirements",
            "text": "",
            "title": "Requirements"
        },
        {
            "location": "/speech-processing/#javascript-libraries",
            "text": "Annyang  - Speech Recognition(Uses Google Speech Recognizer)  SpeechKITT  - GUI for interacting with Speech Recognition  say.js  - Speech Synthesis",
            "title": "Javascript Libraries"
        },
        {
            "location": "/speech-processing/#working",
            "text": "Step 1 : Client gives speech input by interacting with the GUI provided by SpeechKITT  which in turn uses  Annyang  for speech recognition. The speech\nwill be recognized only, if it begins with the defined hotword.  Step 2 : After client finished speaking, the recognized text(excluding\nhotword) from speech is sent to the program  socket_voice.py  running on server\nusing web sockets  socket_speech.js .  Step 3 :  socket_voice.py  receives the text and process it using another\npython program  nlp.py  that takes text as input and returns the modified URL.\nIf successful, this URL is sent back to client web browser. Otherwise, an error\nmessage will be sent.  Step 4 : If client get the URL in return, the client browser will be\nredirected to that URL. Otherwise, he had to speak again the command.",
            "title": "Working"
        },
        {
            "location": "/session-management/",
            "text": "Session Management\n\n\nIt will be an inconvenience to client, if he had to authenticate himself for\nevery action on access restricted webpage. Instead, authentication should be\ndone once and granted a ticket/token to website. Cookies are used for this same\npurpose. They are a small piece of data that is stored on client's browser to\nmaintain the session.\n\n\n\nWorking\n\n\nStep 1\n: When a client is authenticated, a cookie is generated on the server\nusing python \ncookies\n module in \nhttp\n package and assigned a name \nsecret\n\nwith a random string value of 32 bytes.\n\n\nStep 2\n: The entry containing username along with cookie value is saved to a\nfile called cookies.txt in cookies folder. So, when a client will authenticate\nfor first time, the new entry will we added in that file. Otherwise, the cookie\nin corresponding entry will get updated.\n\n\nStep 3\n: The same cookie is sent to the client over web sockets and saved in\nhis web browser with expiry time of 3 hrs.\n\n\nStep 4\n: The first thing every restricted webpage does is, matching the\nclient web browser cookie to the corresponding username server cookie saved in\nthe cookies.txt. If they matched, client is shown the restricted content.\nOtherwise, he is redirected to login page.\n\n\n\nNote\n\n\nWe created a \ncookie.py\n module which contain three functions to simplify\nmanaging cookies.\n\n\n\n\n\n\nset_cookie\n - Generate and save cookie and return cookie object\n\n\n\n\n\n\nget_cookie\n - Get cookie value stored on client browser\n\n\n\n\n\n\nauth_client\n - Return True, if client cookie matches with server cookie\n\n\n\n\n\n\n\nProblems\n\n\nProblem: Unable to write to \n/var/www/cgi-bin/cookies/cookies.txt\n from Python\nCGI.\n\n\nSolution:\n Python program writes to a file using file handling. In case of\nPython CGI, Apache user executes the Python program and Apache user does not\nhave the permission to create the file in cookie:\n\n\n\n\n\n\nDisable SELINUX\n\n      \nsetenforce 0\n or permanently disable it in SELINUX config file\n\n\n\n\n\n\nGive Apache permissions to write to cookies folder\n\n      \nchown apache /var/www/cgi-bin/cookies\n\n      \nchgrp apache /var/www/cgi-bin/cookies\n\n      \nchmod -R 2775 /var/www/cgi-bin/cookies",
            "title": "Session Management"
        },
        {
            "location": "/session-management/#session-management",
            "text": "It will be an inconvenience to client, if he had to authenticate himself for\nevery action on access restricted webpage. Instead, authentication should be\ndone once and granted a ticket/token to website. Cookies are used for this same\npurpose. They are a small piece of data that is stored on client's browser to\nmaintain the session.",
            "title": "Session Management"
        },
        {
            "location": "/session-management/#working",
            "text": "Step 1 : When a client is authenticated, a cookie is generated on the server\nusing python  cookies  module in  http  package and assigned a name  secret \nwith a random string value of 32 bytes.  Step 2 : The entry containing username along with cookie value is saved to a\nfile called cookies.txt in cookies folder. So, when a client will authenticate\nfor first time, the new entry will we added in that file. Otherwise, the cookie\nin corresponding entry will get updated.  Step 3 : The same cookie is sent to the client over web sockets and saved in\nhis web browser with expiry time of 3 hrs.  Step 4 : The first thing every restricted webpage does is, matching the\nclient web browser cookie to the corresponding username server cookie saved in\nthe cookies.txt. If they matched, client is shown the restricted content.\nOtherwise, he is redirected to login page.",
            "title": "Working"
        },
        {
            "location": "/session-management/#note",
            "text": "We created a  cookie.py  module which contain three functions to simplify\nmanaging cookies.    set_cookie  - Generate and save cookie and return cookie object    get_cookie  - Get cookie value stored on client browser    auth_client  - Return True, if client cookie matches with server cookie",
            "title": "Note"
        },
        {
            "location": "/session-management/#problems",
            "text": "Problem: Unable to write to  /var/www/cgi-bin/cookies/cookies.txt  from Python\nCGI.  Solution:  Python program writes to a file using file handling. In case of\nPython CGI, Apache user executes the Python program and Apache user does not\nhave the permission to create the file in cookie:    Disable SELINUX \n       setenforce 0  or permanently disable it in SELINUX config file    Give Apache permissions to write to cookies folder \n       chown apache /var/www/cgi-bin/cookies \n       chgrp apache /var/www/cgi-bin/cookies \n       chmod -R 2775 /var/www/cgi-bin/cookies",
            "title": "Problems"
        },
        {
            "location": "/paas/",
            "text": "Highlights\n\n\n\n\n\n\nLaunch development platform at one click\n\n\n\n\n\n\nDynamic \nDockerfile\n will be created depending on selected packages and\nmodules to install.\n\n\n\n\n\n\nAccess to the platform is provided using \nShellinabox\n.\n\n\n\n\n\n\nPython development platform shell is changed with Python shell by editing\n/etc/passwd.\n\n\n\n\n\n\nNote\n: For now, Dockerfile is created but is not used in demonstration to\nlaunch the container(Due to slow internet). Currently, only Python environment\nis supported whose default shell username and password is guest.",
            "title": "Platform as a Service"
        },
        {
            "location": "/paas/#highlights",
            "text": "Launch development platform at one click    Dynamic  Dockerfile  will be created depending on selected packages and\nmodules to install.    Access to the platform is provided using  Shellinabox .    Python development platform shell is changed with Python shell by editing\n/etc/passwd.    Note : For now, Dockerfile is created but is not used in demonstration to\nlaunch the container(Due to slow internet). Currently, only Python environment\nis supported whose default shell username and password is guest.",
            "title": "Highlights"
        },
        {
            "location": "/saas/",
            "text": "Highlights\n\n\nLaunch software from cloud to your local machine in one click. To launch\nsoftware in Windows, a batch file is provided. But, there are two requirements\nthat should be fulfilled before launching the software using batch file.\n\n\n\n\n\n\nWindows does not have X11 window server, by default. So, we are using a 3rd\nparty X11 windows server, VcXsrv that should be installed.\n\n\n\n\n\n\nAlso, another software, PUTTY is used to SSH to the cloud, should also be\ninstalled.\n\n\n\n\n\n\nBatch File \nfirefox.bat\n:\n\n\ncd C:\\Program Files\\VcXsrv\nxlaunch.exe -run config.xlau\ncd C:\\Program Files\\PuTTY\nputty.exe -X -C -ssh root@192.168.43.98 1235 -pw q -m test.txt\n\n\n\nNote\n:\n\n\n\n\n\n\nLaunching VcXsrv from command line launches GUI that asks for configuration\nsteps to be done. So, we saved the config manually to a file \nconfig.xlau\n and\nstart the program using that config file.\n\n\n\n\n\n\nThere is also a requirement of another file, \ntest.txt\n which contains\nthe list of commands to be ran automatically on SSH. In this case, it just\ncontains Firefox. For now, we have manually put it into PuTTY installed location.\n\n\n\n\n\n\n\nProblems\n\n\nProblem: While providing Firefox using SaaS, the memory consumption continues\nto increase. Soon, it consumes all of the available RAM and system hangs.\n\n\nSolution\n: While launching Firefox or any another program in a container, we\ncan limit it's memory consumption by launching it using this command:\n\nulimit -Sv 512000 && firefox",
            "title": "Software as a Service"
        },
        {
            "location": "/saas/#highlights",
            "text": "Launch software from cloud to your local machine in one click. To launch\nsoftware in Windows, a batch file is provided. But, there are two requirements\nthat should be fulfilled before launching the software using batch file.    Windows does not have X11 window server, by default. So, we are using a 3rd\nparty X11 windows server, VcXsrv that should be installed.    Also, another software, PUTTY is used to SSH to the cloud, should also be\ninstalled.    Batch File  firefox.bat :  cd C:\\Program Files\\VcXsrv\nxlaunch.exe -run config.xlau\ncd C:\\Program Files\\PuTTY\nputty.exe -X -C -ssh root@192.168.43.98 1235 -pw q -m test.txt  Note :    Launching VcXsrv from command line launches GUI that asks for configuration\nsteps to be done. So, we saved the config manually to a file  config.xlau  and\nstart the program using that config file.    There is also a requirement of another file,  test.txt  which contains\nthe list of commands to be ran automatically on SSH. In this case, it just\ncontains Firefox. For now, we have manually put it into PuTTY installed location.",
            "title": "Highlights"
        },
        {
            "location": "/saas/#problems",
            "text": "Problem: While providing Firefox using SaaS, the memory consumption continues\nto increase. Soon, it consumes all of the available RAM and system hangs.  Solution : While launching Firefox or any another program in a container, we\ncan limit it's memory consumption by launching it using this command: ulimit -Sv 512000 && firefox",
            "title": "Problems"
        },
        {
            "location": "/caas/",
            "text": "Highlights\n\n\n\n\nStart, stop and launch containers of different OS\n\n\nMonitor container stats like RAM, Network Usage, etc. in real-time\n\n\n\n\n\nProblems\n\n\nProblem 1: How to get docker container stats in real-time?\n\n\nSolution\n: Any docker container stats can be viewed using the command\n\n\n# docker stats container_name\n\n\nThere is a problem with the above command as it do show live stats but it\ncontinues to run indefinitely. However, there is an option to show the live\nstats only of that instant. \n\n\n# docker stats container_name --no-stream\n\n\nProblem 2: How to update container stats displayed on the HTML page every\nsecond?\n\n\nSolution\n: Use HTML header meta tag to reload the webpage after every fixed\nduration of seconds\n\n        \n<meta http-equiv = \"refresh\" content =\"1\"/>",
            "title": "Container as a Service"
        },
        {
            "location": "/caas/#highlights",
            "text": "Start, stop and launch containers of different OS  Monitor container stats like RAM, Network Usage, etc. in real-time",
            "title": "Highlights"
        },
        {
            "location": "/caas/#problems",
            "text": "Problem 1: How to get docker container stats in real-time?  Solution : Any docker container stats can be viewed using the command  # docker stats container_name  There is a problem with the above command as it do show live stats but it\ncontinues to run indefinitely. However, there is an option to show the live\nstats only of that instant.   # docker stats container_name --no-stream  Problem 2: How to update container stats displayed on the HTML page every\nsecond?  Solution : Use HTML header meta tag to reload the webpage after every fixed\nduration of seconds \n         <meta http-equiv = \"refresh\" content =\"1\"/>",
            "title": "Problems"
        },
        {
            "location": "/staas/",
            "text": "Highlights\n\n\n\n\n\n\nGive cloud storage to client using NFS\n\n\n\n\n\n\nStorage can be upgraded as per client requirements\n\n\n\n\n\n\nClient can access storage in Windows using provided batch file \n4k_drive.bat\n\n\n\n\n\n\nBatch File \n4k_drive.bat\n:\n\n\nDISM  /online /enable-feature  /featurename:ServicesForNFS-ClientOnly\nDISM  /online /enable-feature  /featurename:ClientForNFS-Infrastructure\nmount \\\\192.168.43.98\\wshare\\guest z:\n\n\n\n\n\nNote:\n\n\n\n\nDISM (Deployment Image Servicing and Management) allows turning Windows\nfeatures ON and OFF from command line. There are two features that need to be\nenabled in Windows machine to work as NFS Client. As, this is a privileged\naction and it requires admin rights, the batch file need to be run as\nadministrator.\n\n\n\nThe mount command in the batch file will mount the cloud drive to a windows\ndrive with letter name '\nz\n'. But, there is a problem that it don't work if it run as an\nadministrator. So, it need to ran without administrator privilege.\n\n\n\n\n\nProblems\n\n\nProblem: The client can't write to file/folder in the windows mounted drive.\n\n\nSolution\n: When a client requests for a storage, a LV is created and mounted\nto a folder in cloud. That LV is shared to client using NFS. This error usually\noccurs when a client only have the default permissions i.e. 755 to access that\nmounted drive on cloud. This means, client have only read and execute\npermissions and can't write anything.\n\n\nEven if the directory to which the LV is going to be mounted is given 777\npermission, the client can't write anything. This is because, when a partition is\nmounted on a directory, the permissions of that directory resets to default i.e.\n755. So instead of changing the permission of directory to 777 before mounting,\nit should be done after mounting the partition.",
            "title": "Storage as a Service"
        },
        {
            "location": "/staas/#highlights",
            "text": "Give cloud storage to client using NFS    Storage can be upgraded as per client requirements    Client can access storage in Windows using provided batch file  4k_drive.bat    Batch File  4k_drive.bat :  DISM  /online /enable-feature  /featurename:ServicesForNFS-ClientOnly\nDISM  /online /enable-feature  /featurename:ClientForNFS-Infrastructure\nmount \\\\192.168.43.98\\wshare\\guest z:   Note:   DISM (Deployment Image Servicing and Management) allows turning Windows\nfeatures ON and OFF from command line. There are two features that need to be\nenabled in Windows machine to work as NFS Client. As, this is a privileged\naction and it requires admin rights, the batch file need to be run as\nadministrator.  The mount command in the batch file will mount the cloud drive to a windows\ndrive with letter name ' z '. But, there is a problem that it don't work if it run as an\nadministrator. So, it need to ran without administrator privilege.",
            "title": "Highlights"
        },
        {
            "location": "/staas/#problems",
            "text": "Problem: The client can't write to file/folder in the windows mounted drive.  Solution : When a client requests for a storage, a LV is created and mounted\nto a folder in cloud. That LV is shared to client using NFS. This error usually\noccurs when a client only have the default permissions i.e. 755 to access that\nmounted drive on cloud. This means, client have only read and execute\npermissions and can't write anything.  Even if the directory to which the LV is going to be mounted is given 777\npermission, the client can't write anything. This is because, when a partition is\nmounted on a directory, the permissions of that directory resets to default i.e.\n755. So instead of changing the permission of directory to 777 before mounting,\nit should be done after mounting the partition.",
            "title": "Problems"
        },
        {
            "location": "/data-analysis/",
            "text": "Matplotlib\n\n\nFor plotting graphs on Linux machines, various Python dependencies need to be\ninstalled first. To plot graph in real-time in a website, a graph is plotted\nfirst, then, saved to a JPEG image file and that file is shown in the webpage.\n\n\nNow, whenever client enters a query, the script matches the words with our\npre-defined dictionary and proceed accordingly.\n\n\n\nRequirements\n\n\nPackages\n\n\n\n\ncgi\n\n\npandas\n      - pip3 install pandas\n\n\nnumpy\n             - pip3 install numpy\n\n\nmatplotlib\n  - pip3 install matplotlib\n\n\ntkinter\n     - yum install \ntkinter\n\n\n\n\n\n\nWorking\n\n\nStep 1\n: Query is matched with our dictionary.\n\n\nStep 2\n: A function is called for plotting graphs that plots and save the\ngraphs in a directory, which is then loaded on the webpage.\n\n\n\nProblems\n\n\nProblem 1: Load different datasets for different query. \n\n\nSolution:\n We cleaned, filtered and assigned various datasets to different\nvariables and we put these variable names in another dataset table. However, at\none point in our code, we needed to get the contents of the variable given its\nname.\n\n\nglobals() is used to call global variable defined earlier. It changes str() to\nthat datatype which is already defined.\n\n\n\nProblem 2: Plot graph on linux.\n\n\nSolution:\n To solve this problem, we used tkinter but it requires various\nvariables and environment set-ups. So we added a line: \nmatplotlib.use('Agg')\n\nbefore we imported tkinter and it worked like a charm.",
            "title": "Data Analysis"
        },
        {
            "location": "/data-analysis/#matplotlib",
            "text": "For plotting graphs on Linux machines, various Python dependencies need to be\ninstalled first. To plot graph in real-time in a website, a graph is plotted\nfirst, then, saved to a JPEG image file and that file is shown in the webpage.  Now, whenever client enters a query, the script matches the words with our\npre-defined dictionary and proceed accordingly.",
            "title": "Matplotlib"
        },
        {
            "location": "/data-analysis/#requirements",
            "text": "",
            "title": "Requirements"
        },
        {
            "location": "/data-analysis/#packages",
            "text": "cgi  pandas       - pip3 install pandas  numpy              - pip3 install numpy  matplotlib   - pip3 install matplotlib  tkinter      - yum install  tkinter",
            "title": "Packages"
        },
        {
            "location": "/data-analysis/#working",
            "text": "Step 1 : Query is matched with our dictionary.  Step 2 : A function is called for plotting graphs that plots and save the\ngraphs in a directory, which is then loaded on the webpage.",
            "title": "Working"
        },
        {
            "location": "/data-analysis/#problems",
            "text": "Problem 1: Load different datasets for different query.   Solution:  We cleaned, filtered and assigned various datasets to different\nvariables and we put these variable names in another dataset table. However, at\none point in our code, we needed to get the contents of the variable given its\nname.  globals() is used to call global variable defined earlier. It changes str() to\nthat datatype which is already defined.  Problem 2: Plot graph on linux.  Solution:  To solve this problem, we used tkinter but it requires various\nvariables and environment set-ups. So we added a line:  matplotlib.use('Agg') \nbefore we imported tkinter and it worked like a charm.",
            "title": "Problems"
        }
    ]
}